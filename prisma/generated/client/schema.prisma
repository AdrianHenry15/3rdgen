// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

// Set your database connection URL
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  category  Category
  itemId    String
  timestamp DateTime @default(now())
  Website   Website? @relation(fields: [websiteId], references: [id])
  websiteId String?  @db.ObjectId
  User      User     @relation(fields: [userId], references: [id])
  Artist    Artist?  @relation(fields: [artistId], references: [id])
  artistId  String?  @db.ObjectId
  Movie     Movie?   @relation(fields: [movieId], references: [id])
  movieId   String?  @db.ObjectId
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  category  Category
  itemId    String
  comment   String
  timestamp DateTime @default(now())
  website   Website? @relation(fields: [websiteId], references: [id])
  websiteId String?  @db.ObjectId
  Song      Song?    @relation(fields: [songId], references: [id])
  songId    String?  @db.ObjectId
  Artist    Artist?  @relation(fields: [artistId], references: [id])
  artistId  String?  @db.ObjectId
  Movie     Movie?   @relation(fields: [movieId], references: [id])
  movieId   String?  @db.ObjectId
}

model Card {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  userId          String // Foreign Key referencing User
  cardId          String // Foreign Key referencing Card
  amount          Int
  currency        String
  transactionType TransactionType // purchase, refund
  status          Status // pending, completed, failed
  timestamp       DateTime        @default(now())
}

model Movie {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  img         String
  title       String
  genre       String
  description String
  releaseDate String    @map("release_date")
  likes       Like[]
  comments    Comment[]
}

// Define your data model
model Website {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  img          String
  title        String
  genre        String
  technologies String
  description  String
  release_date String
  link         String
  likes        Like[]
  comments     Comment[] // New field to represent comments
}

model Song {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  img         String
  title       String
  albumName   String    @map("album_name")
  artist      String
  genre       String
  releaseDate String    @map("release_date")
  duration    String
  plays       Int       @default(0)
  song        String
  comments    Comment[]
  likes       Int       @default(0) // Assuming likes is an integer count
  Artist      Artist?   @relation(fields: [artistId], references: [id])
  artistId    String?   @db.ObjectId
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String    @unique
  name      String
  addresses Address[]
  likes     Like[]
}

model Artist {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  img         String
  title       String
  genre       String
  description String
  releaseDate String    @map("release_date")
  likes       Like[]
  comments    Comment[]
  songs       Song[]
}

enum TransactionType {
  PURCHASE
  REFUND
}

enum Status {
  PENDING
  COMPLETED
  FAILED
}

enum Category {
  ARTIST
  SONG
  WEBSITE
  MOVIE
}

// Address is an embedded document
type Address {
  street String
  city   String
  state  String
  zip    String
}
