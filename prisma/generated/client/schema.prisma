// prisma/schema.prisma

generator client {
    provider = "prisma-client-js"
    output   = "./generated/client"
}

// Set your database connection URL
datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

// Define your data model
model WebsiteProject {
    id           String                  @id @default(auto()) @map("_id") @db.ObjectId
    img          String
    title        String
    genre        String
    technologies String
    description  String
    release_date String
    link         String
    likes        Int                     @default(0) // Assuming likes is an integer count
    comments     WebsiteProjectComment[] // New field to represent comments
    likedByUsers UserLikedWebsite[] // Added opposite relation field
}

model WebsiteProjectComment {
    id               String         @id @default(auto()) @map("_id") @db.ObjectId
    comment          String
    websiteProject   WebsiteProject @relation(fields: [websiteProjectId], references: [id])
    websiteProjectId String         @db.ObjectId
    likes            Int            @default(0)
}

model Song {
    id           String          @id @default(auto()) @map("_id") @db.ObjectId
    img          String
    title        String
    albumName    String          @map("album_name")
    artist       String
    genre        String
    releaseDate  String          @map("release_date")
    duration     String
    plays        Int             @default(0)
    song         String
    comments     SongComment[]
    likes        Int             @default(0) // Assuming likes is an integer count
    likedByUsers UserLikedSong[]
}

model SongComment {
    id      String @id @default(auto()) @map("_id") @db.ObjectId
    comment String
    song    Song   @relation(fields: [songId], references: [id])
    songId  String @db.ObjectId
    likes   Int    @default(0)
}

model UserLikedSong {
    id          String @id @default(auto()) @map("_id") @db.ObjectId
    user        User   @relation(fields: [userId], references: [id])
    userId      String @db.ObjectId
    likedSong   Song   @relation(fields: [likedSongId], references: [id])
    likedSongId String @db.ObjectId
}

model User {
    id            String             @id @default(auto()) @map("_id") @db.ObjectId
    email         String             @unique
    name          String?
    address       Address?
    likedWebsites UserLikedWebsite[] // New field to represent liked websites
    likedSongs    UserLikedSong[] // New field to represent liked songs
    likedArtists  UserLikedArtist[] // Represents liked artists
}

model UserLikedWebsite {
    id             String         @id @default(auto()) @map("_id") @db.ObjectId
    user           User           @relation(fields: [userId], references: [id])
    userId         String         @db.ObjectId
    likedWebsite   WebsiteProject @relation(fields: [likedWebsiteId], references: [id])
    likedWebsiteId String         @db.ObjectId
}

model Artist {
    id           String            @id @default(auto()) @map("_id") @db.ObjectId
    img          String
    title        String
    genre        String
    description  String
    releaseDate  String            @map("release_date")
    likes        Int               @default(0)
    comments     ArtistComment[]
    likedByUsers UserLikedArtist[]
}

model ArtistComment {
    id       String @id @default(auto()) @map("_id") @db.ObjectId
    comment  String
    artist   Artist @relation(fields: [artistId], references: [id])
    artistId String @db.ObjectId
    likes    Int    @default(0)
}

model UserLikedArtist {
    id            String @id @default(auto()) @map("_id") @db.ObjectId
    user          User   @relation(fields: [userId], references: [id])
    userId        String @db.ObjectId
    likedArtist   Artist @relation(fields: [likedArtistId], references: [id])
    likedArtistId String @db.ObjectId
}

// Address is an embedded document
type Address {
    street String
    city   String
    state  String
    zip    String
}
