generator client {
  provider = "prisma-client-js"
}

// Set your database connection URL
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model S3TrackDataRef {
  id         String          @id @default(auto()) @map("_id") @db.ObjectId
  bucket     String
  key        String
  metadata   S3TrackMetadata @relation(fields: [metadataId], references: [id])
  metadataId String          @db.ObjectId
  Song       Song[]
}

model S3TrackMetadata {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  duration  Int
  S3DataRef S3TrackDataRef[]
}

model Song {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  img         String
  title       String
  album       String         @map("album")
  artist      String
  genre       String
  releaseDate String         @map("release_date")
  bpm         String
  plays       Int            @default(0)
  file        S3TrackDataRef @relation(fields: [fileId], references: [id])
  fileId      String         @db.ObjectId
  Artist      Artist?        @relation(fields: [artistId], references: [id])
  artistId    String?        @db.ObjectId
  createdAt   DateTime       @default(now())
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String    @unique
  name      String
  addresses Address[]
  role      Roles
  createdAt DateTime  @default(now())
}

model Artist {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  img         String
  title       String
  description String
  songs       Song[]
  createdAt   DateTime @default(now())
}

enum TransactionType {
  PURCHASE
  REFUND
}

enum Roles {
  USER
  ADMIN
}

enum Status {
  PENDING
  COMPLETED
  FAILED
}

enum Category {
  ARTIST
  SONG
  WEBSITE
  MOVIE
}

// Address is an embedded document
type Address {
  street String
  city   String
  state  String
  zip    String
}
