generator client {
  provider = "prisma-client-js"
}

// Set your database connection URL
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model S3SongDataRef {
  id         String          @id @default(auto()) @map("_id") @db.ObjectId
  bucket     String
  key        String
  content    String?
  metadata   S3SongMetadata? @relation(fields: [metadataId], references: [id])
  metadataId String?         @db.ObjectId
  Song       Song[]
}

model S3SongMetadata {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  duration  Int
  S3DataRef S3SongDataRef[]
}

model Song {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  img         S3ImageDataRef @relation(fields: [imgId], references: [id])
  imgId       String         @db.ObjectId
  title       String
  albumName   String?
  artist      String?
  price       Int
  genre       String?
  releaseDate String?
  bpm         String?
  plays       Int            @default(0)
  audioFile   S3SongDataRef  @relation(fields: [audioFileId], references: [id])
  audioFileId String         @db.ObjectId
  createdAt   DateTime       @default(now())
}

model S3ImageDataRef {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  bucket String
  key    String
  Song   Song[]
  Artist Artist[]
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  email     String    @unique
  name      String
  addresses Address[]
  role      Roles
  createdAt DateTime  @default(now())
}

model Artist {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  img         S3ImageDataRef @relation(fields: [imgId], references: [id])
  imgId       String         @db.ObjectId
  title       String
  description String
  createdAt   DateTime       @default(now())
}

enum TransactionType {
  PURCHASE
  REFUND
}

enum Roles {
  USER
  ADMIN
}

enum Status {
  PENDING
  COMPLETED
  FAILED
}

enum Category {
  ARTIST
  SONG
  WEBSITE
  MOVIE
}

// Address is an embedded document
type Address {
  street String
  city   String
  state  String
  zip    String
}
